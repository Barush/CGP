scatterplot3d(x1, x2, y, pch=15, color="red", size=3, type="h")
scatterplot3d(x1, x2, y, pch=15, color="red", type="h")
curve_3d(x1, x2, y)
pdf(3dfunc.pdf)
pdf("3dfunc.pdf")
scatterplot3d(x1, x2, y, pch=15, color="red", type="h")
dev.off()
y<-c(((x1-3)^4 + (x2 - 3)^3 - (x2 - 3))/((x2 - 2)^4 + 10))
scatterplot3d(x1, x2, y, pch=15, color="red", type="h")
pdf("3dfunc.pdf")
scatterplot3d(x1, x2, y, pch=15, color="red", type="h")
dev.off()
x1<-seq(from = -10, to = 10, by = 0.1)
x2<-x1
e<-2.7
pi<-3.14
y<-c(e^(-x1)*x1^3*cos(x1)*sin(x1)*(cos(x1)*(sin(x1))^2 - 1)*(x2 - 5))
scatterplot3d(x1, x2, y, pch=15, color="red", type="h")
x2<-seq(from=10, to=-10, by=0.1)
x2<-seq(from=10, to=-10, by=-0.1)
scatterplot3d(x1, x2, y, pch=15, color="red", type="h")
x2<-x1
scatterplot3d(x1, x2, y, pch=15, color="red", type="h")
wireframe(z ~ e^(-x)*x^3*cos(x)*sin(x)*(cos(x)*(sin(x))^2 - 1)*(y - 5), data = xyz, scales = list(arrows = FALSE),zlab = 'f(x, y)', drape = T)
library(lattice)
wireframe(z ~ e^(-x)*x^3*cos(x)*sin(x)*(cos(x)*(sin(x))^2 - 1)*(y - 5), data = xyz, scales = list(arrows = FALSE),zlab = 'f(x, y)', drape = T)
wireframe(z ~ e^(-x)*x^3*cos(x)*sin(x)*(cos(x)*(sin(x))^2 - 1)*(y - 5))
help(wireframe)
g <- expand.grid(x = 1:10, y = 5:15, gr = 1:2)
g <- expand.grid(x = 1:10, y = 5:15, gr = 1:2, data=g)
g <- expand.grid(x = 1:10, y = 5:15, gr = 1:2)
wireframe(z ~ e^(-x)*x^3*cos(x)*sin(x)*(cos(x)*(sin(x))^2 - 1)*(y - 5), data=g)
wireframe(gr ~ e^(-x)*x^3*cos(x)*sin(x)*(cos(x)*(sin(x))^2 - 1)*(y - 5), data=g)
wireframe(gr ~ x*y, data=g)
help(wireframe)
wireframe(volcano, shade = TRUE,
aspect = c(61/87, 0.4),
light.source = c(10,0,10))
volcano
clear
wireframe(gr ~ x*y, data=g)
help(wireframe)
xyplot(lat ~ long | Depth, data = quakes)
require(stats)
## Tonga Trench Earthquakes
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
xyplot(lat ~ long | Depth, data = quakes)
states <- data.frame(state.x77,
state.name = dimnames(state.x77)[[1]],
state.region = state.region)
xyplot(Murder ~ Population | state.region, data = states,
groups = state.name,
panel = function(x, y, subscripts, groups) {
ltext(x = x, y = y, labels = groups[subscripts], cex=1,
fontfamily = "HersheySans")
})
wireframe(volcano, shade = TRUE,
aspect = c(61/87, 0.4),
light.source = c(10,0,10))
g
g <- expand.grid(x = 0:10, y = 0:10 , gr = -4:4)
g
arr <- expand.grid(x = 0:10, y = 0:10 , gr = -4:4)
arr
wireframe(gr ~ x*y, data=g)
wireframe(gr ~ x*y+1, data=g)
wireframe(gr ~ (x*y+1), data=g)
wireframe(e^(-x)*x^3*cos(x)*sin(x)*(cos(x)*(sin(x))^2 - 1)*(y - 5))
scatterplot3d(e^(-x)*x^3*cos(x)*sin(x)*(cos(x)*(sin(x))^2 - 1)*(y - 5))
x<-seq(0,10,0.1)
y<-seq(0,10,0.1)
scatterplot3d(e^(-x)*x^3*cos(x)*sin(x)*(cos(x)*(sin(x))^2 - 1)*(y - 5))
persp(x, y, e^(-x)*x^3*cos(x)*sin(x)*(cos(x)*(sin(x))^2 - 1)*(y - 5))
z<-c(e^(-x)*x^3*cos(x)*sin(x)*(cos(x)*(sin(x))^2 - 1)*(y - 5))
persp(x, y, z
)
z
x1
←
r n o r m
( 1 0 0 ) ; x2
←
r p o i s
( 1 0 0 , lambda =4)
l o g i s t
←
f u n c t i o n
( x1 , x2 )
f
y
←
1
/
( 1 +
e x p
( (
−
1)
*
(
−
3 + 0 . 6
*
x1 + . 5
*
x2 ) ) )
g
p a r
( bg = "w h i t e ")
x 1 r
←
r a n g e
( x1 ) ; x 1 s e q
←
s e q
( x 1 r [ 1 ] , x 1 r [ 2 ] ,
l e n g t h
= 3 0 )
x 2 r
←
r a n g e
( x2 ) ; x 2 s e q
←
s e q
( x 2 r [ 1 ] , x 2 r [ 2 ] ,
l e n g t h
= 3 0 )
z
←
o u t e r
( x 1 s e q , x 2 s e q , l o g i s t )
p e r s p
( x = x 1 s e q , y = x 2 s e q , z = z , t h e t a =
−
30 ,
z l i m =
c
(
−
0.2 , 1 . 2 ) )
x1<-rnorm(100)
fix(`x1`)
x2<-rpois(100, lambda=4)
x1<-seq(0,10,0.1)
x2<-x1
logist<-function(x1,x2){y<-exp(-x1)*sin(x1)*cos(x1)*(cos(x1)*(sin(x1))^2 - 1)*(x2 - 5)}
z<-outer(x1,x2,logist)
persp(x=x1, y=x2, z=z)
persp(x=x1, y=x2, z=z, theta=30)
nrz<-nrow(z)
ncz<-ncol(z)
jet.colors<-colorRampPalette(c("red", "green"))
nbcol<-100
color<-jet.colors(nbcol)
zfacet<-z[-1,-1]+z[-1, -ncz]+z[-nrz, -1]+z[-nrz, -ncz]
facetcol<-cut(zfacet, nbcol)
persp(x=x1, y=x2, z=z, theta=30, col=color[facetcol])
persp(x=x1, y=x2, z=z, theta=90, col=color[facetcol])
persp(x=x1, y=x2, z=z, theta=-20, col=color[facetcol])
persp(x=x1, y=x2, z=z, theta=50, col=color[facetcol])
help(persp)
persp(x=x1, y=x2, z=z, theta=50, phi=20, col=color[facetcol])
persp(x=x1, y=x2, z=z, theta=50, phi=70, col=color[facetcol])
persp(x=x1, y=x2, z=z, theta=50, phi=50, col=color[facetcol])
persp(x=x1, y=x2, z=z, theta=50, phi=30, col=color[facetcol])
persp(x=x1, y=x2, z=z, theta=30, phi=30, col=color[facetcol])
persp(x=x1, y=x2, z=z, theta=30, phi=30)
pdf("salustowitz.pdf")
persp(x=x1, y=x2, z=z, theta=30, phi=30)
dev.off()
logist1<-function(x1,x2){10/(5+(x1-3)^2+(x2-3)^2)}
z1<-outer(x1,x2,logist1)
persp(x=x1, y=x2, z=z1, theta=30, phi=30)
persp(x=x1, y=x2, z=z1, theta=0, phi=30)
persp(x=x1, y=x2, z=z1, theta=10, phi=30)
persp(x=x1, y=x2, z=z1, theta=0, phi=40)
persp(x=x1, y=x2, z=z1, theta=0, phi=50)
persp(x=x1, y=x2, z=z1, theta=0, phi=30)
pdf("unwrapped_ball.pdf")
persp(x=x1, y=x2, z=z1, theta=0, phi=30)
dev.off()
fix(`x1`)
persp(x=x1, y=x2, z=z1, theta=0, phi=30, col=color[facetcol])
help(persp)
persp(x=x1, y=x2, z=z1, theta=0, phi=30, col="red")
jet.colors<-colorRampPalette(c("red", "purple"))
> nbcol<-100
> color<-jet.colors(nbcol)
> zfacet<-z[-1,-1]+z[-1, -ncz]+z[-nrz, -1]+z[-nrz, -ncz]
> facetcol<-cut(zfacet, nbcol)
nbcol<-100
color<-jet.colos(nbcol)
color<-jet.colors(nbcol)
zfacet<-z[-1,-1]+z[-1, -ncz]+z[-nrz, -1]+z[-nrz, -ncz]
facetcol<-cut(zfacet, nbcol)
persp(x=x1, y=x2, z=z1, theta=0, phi=30, col=color[facetcol])
pdf("unwrapped_ball_col.pdf")
persp(x=x1, y=x2, z=z1, theta=0, phi=30, col=color[facetcol])
dev.off()
persp(x=x1, y=x2, z=z, theta=0, phi=30, col=color[facetcol])
persp(x=x1, y=x2, z=z, theta=50, phi=30, col=color[facetcol])
persp(x=x1, y=x2, z=z, theta=30, phi=30, col=color[facetcol])
pdf("salustowitz_col.pdf")
persp(x=x1, y=x2, z=z, theta=30, phi=30, col=color[facetcol])
dev.off()
y<-c(0.5*x1+2*x2)
scatterplot3d(x1, x2, y)
library(scatterplot3d)
scatterplot3d(x1, x2, y)
logist<-function(x1, x2){y<-0.5*x1+2*x2}
z<-outer(x1, x2, logist)
persp(x=x1, y=x2, z=z)
nrz<-nrow(z)
ncz<-ncol(z)
jet.colors<-colorRampPalette(c("blue", "green"))
nbcol<-100
color<-jet.colors(nbcol)
zfacet<-z[-1,-1]+z[-1, ncz]+z[-nrz, -1]+z[-nrz, -ncz]
facetcol<-cut(zfacet, nbcol)
persp(x=x1, y=x2, z=z, col=color[facetcol])
persp(x=x1, y=x2, z=z, col=color[facetcol], theta=10)
persp(x=x1, y=x2, z=z, col=color[facetcol], theta=30)
persp(x=x1, y=x2, z=z, col=color[facetcol], theta=30, pi=30)
persp(x=x1, y=x2, z=z, pi=30, col=color[facetcol], theta=30)
persp(x=x1, y=x2, z=z, col=color[facetcol], theta=30)
pdf("linear.pdf")
persp(x=x1, y=x2, z=z, col=color[facetcol], theta=30)
dev.off()
logist<-function(x1, x2){y<-0.5*x1^6+2*x2^3}
z<-outer(x1, x2, logist)
persp(x=x1, y=x2, z=z, col=color[facetcol], theta=30)
persp(x=x1, y=x2, z=z, col=color[facetcol], theta=-30)
persp(x=x1, y=x2, z=z, col=color[facetcol], theta=-20)
persp(x=x1, y=x2, z=z, col=color[facetcol], theta=-40)
pdf("polynom.pdf")
persp(x=x1, y=x2, z=z, col=color[facetcol], theta=-40)
dev.off()
logist<-function(x1, x2){y<-sin(10*x1*x2)}
z<-outer(x1, x2, logist)
persp(x=x1, y=x2, z=z, col=color[facetcol], theta=-40)
persp(x=x1, y=x2, z=z, col=color[facetcol], pi=10)
help(persp)
persp(x=x1, y=x2, z=z, col=color[facetcol], phi=10)
persp(x=x1, y=x2, z=z, col=color[facetcol], phi=100)
persp(x=x1, y=x2, z=z, col=color[facetcol], phi=100, xlim=c(0,1))
persp(x=x1, y=x2, z=z, col=color[facetcol], phi=100, xlim=c(0,1), ylim=c(0,1))
persp(x=x1, y=x2, z=z, col=color[facetcol], phi=100, xlim=c(0,1), ylim=c(0,1), phi=10)
persp(x=x1, y=x2, z=z, col=color[facetcol], phi=10, xlim=c(0,1), ylim=c(0,1))
persp(x=x1, y=x2, z=z, col=color[facetcol], xlim=c(0,1), ylim=c(0,1), theta=50)
persp(x=x1, y=x2, z=z, col=color[facetcol], phi=10, xlim=c(0,1), ylim=c(0,1))
1 / (1 + e^(-0.7))
0.67*0.2 + 0.67*0.2 + 0.4
1 / (1 + e^(-0.668))
0.66 * (1 - 0.66)* (1 - 0.66)
0.25*0.076*0.67
0.67 * (1 - 0.67) * (0.213 * 0.076)
0.25 * 0.004 * 0.1
0.25 * 0.004 * 0.9
(1 - e^(-2*0.7))/(1 + e^(-2*0.7))
0.601*0.2+0.601*0.2+0.4
(1 - e^(-2*0.64))/(1 + e^(-2*0.64))
0.56*(1 - 0.56)*(1 - 0.56)
0.25*0.11*0.601
0.601*(1-0.601)*0.22*0.11
0.25*0.006*0.1
0.25*0.006*0.9
0.1*0.2+0.2*0.2+0.2
0.26*0.2+0.26*0.2+0.2
0.304/1.3
0.1*0.2338+0.2*0.2338+0.2338
0.1*0.2338+0.2*0.234+0.234
0.1*0.234+0.2*0.234+0.234
e^(-10)*sin(x)
e^(-10)*sin(-10)
e^(10)*sin(-10)
sin(-10)*e^(10)
e
e <- 2.7182818284
sin(-10)*e^(10)
e^(9.9)*sin(9.9)
x
x<-seq(-10, 10, 0.1)
x
ex_sinx<-c(e^abs(x)*sin(x))
fix(ex_sinx)
help(write.table)
ex_sinx
ex_sinx<-c((e^abs(x))*sin(x))
ex_sinx
curve(e^x)
curve(e^(-x))
curve(0.015*e^(-x/1000))
curve(0.15*e^(-x/1000))
abline(0.03)
line(0.03)
curve(0.15*e^(-x/1000), 0, 1000)
0.015*e^(-1)
line(0.03)
abline(h=0, v=0)
abline(h=0)
curve(0.15*e^(-x/1000), 0, 1000)
abline(h=0)
abline(h=0.03)
abline(h=0.03)
1000*e^(0.03/0.1445)
e^0
curve(0.15*e^(-x/1000))
curve(0.15*e^(-x/1000), 0, 1000)
abline(v=0.03)
abline(h=0.03)
abline(h=0.03)
abline(h=0.06)
abline(h=0.03)
curve(0.15*e^(-x/1000), 0, 1700)
abline(h=0.03)
curve(0.15*e^(-1000/x), 0, 1700)
curve(0.15*e^(-x/1000), 0, 1700)
abline(h=0.03)
curve(0.15*e^(-x/2000), 0, 1700)
abline(h=0.03)
curve(0.15*e^(-x/2000), 0, 2000)
abline(h=0.03)
curve(0.15*e^(-x/2000), 0, 2500)
abline(h=0.03)
0.15*e^(-1)
sqrt(0.5^2+0.6^2+0.8^2)
sqrt(0.4^2+0.2^2+0.5^2)
0.8/1.12
0.6/1.12
0.4/1.12
0.4/0.67
0.2/0.67
0.5/0.67
sqrt(0.8^2+0.7^2+0.4^2)
sqrt(0.6^2+0.9^2+0.9^2)
sqrt(0.3^2+0.4^2+0.1^2)
sqrt(0.1^2+0.1^2+0.3^2)
x1<-c(0.8,0.7,0.4)
x1<-x1/1.14
x1
x2<-c(0.6,0.9,0.9)
x2<-x2/1.41
x2
x3<-c(0.3,0.4,0.1)
x3<-x3/0.51
x3
x4<-c(0.1,0.1,0.3)
x4<-x4/0.33
x4
sqrt((0.7-0.71)^2+(0.6-0.54)^2+(0.4 - 0.36)^2)
sqrt((0.7-0.6)^2+(0.6-0.3)^2+(0.4 - 0.75)^2)
x1
x1<-c(0.7, 0.6, 0.4)
w1
w1<-c(0.71, 0.54, 0.36)
w1<-w1+0.5*x1
w1
sqrt(1.06^2+0.84^2+0.56^2)
w1
w1<-w1/1.46
w1
sqrt((0.43-0.72)^2+(0.64-0.57)^2+(0.64-0.38)^2)
sqrt((0.43-0.6)^2+(0.64-0.3)^2+(0.64-0.75)^2)
W2
w2
w2<-c(0.6,0.3,0.75)
x3<-c(0.59,0.78,0.2)
w2+0.5*x3
sqrt(0.895^2+0.69^2+0.85^2)
newW2<-w2+0.5*x3
newW2/1.414081
sqrt(0.875^2+0.455^2+1.245^2)
vect<-c(0.875,0.455,1.245)
vect/sqrt(0.875^2+0.455^2+1.245^2)
curve(abs(e^(x^x)) - x^x)
curve(abs(e^(x^x)) - x^x, col="red")
par(new=TRUE)
curve(x^2-x^3, col="green")
curve(abs(e^(x^x)) - x^x, col="red", -10, 10)
par(new=TRUE)
curve(x^2-x^3, col="green")
curve(abs(e^(x^x)) - x^x, col="red", -10, 10)
par(new=TRUE)
curve(x^2-x^3, col="green", -10, 10)
x<-seq(-10, 10, 0.1)
x
y<-c(x^2*e^sin(x)+x+sin(pi/3))
y
plot(x, y)
plot(x, y, xlab="", ylab="")
par(new=TRUE)
curve(x^2*e^sin(x)+x)
curve(x^2*e^sin(x)+x, -10, 10)
plot(x, y, xlab="", ylab="", col="red")
par(new=TRUE)
curve(x^2*e^sin(x)+x, -10, 10, col="green")
y<-c(x^2*e^sin(x)+x+sin(pi/(x^3)))
plot(x, y, xlab="", ylab="", col="red")
par(new=TRUE)
curve(x^2*e^sin(x)+x, -10, 10, col="green")
plot(x, y, xlab="", ylab="", col="red", -5, 5)
x<-seq(-5, 5, 0.1)
y<-c(x^2*e^sin(x)+x+sin(pi/(x^3)))
plot(x, y, xlab="", ylab="", col="red")
par(new=TRUE)
curve(x^2*e^sin(x)+x, -5, 5, col="green")
plot(x, y, xlab="", ylab="", col="red", ann=FALSE)
par(new=TRUE)
curve(x^2*e^sin(x)+x, -5, 5, col="green")
plot(x, y, xlab="", ylab="", col="red", yaxt='n')
par(new=TRUE)
curve(x^2*e^sin(x)+x, -5, 5, col="green")
plot(x, y, xlab="", ylab="", col="red", yaxt='n')
par(new=TRUE)
curve(x^2*e^sin(x)+x, -5, 5, col="blue")
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
par(new=TRUE)
curve(x^2*e^sin(x)+x, -5, 5, col="red")
setwd("~/Dokumenty/Bakalarka/CGP/graphs/sums")
pdf("porovnani.pdf")
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
par(new=TRUE)
curve(x^2*e^sin(x)+x, -5, 5, col="red")
dev.off()
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
legend(2000,9.5, # places a legend at the appropriate place c("Health","Defense"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("blue","red")) # gives the legend lines the correct color and width
legend(2000,9.5, c("Health","Defense"), lty=c(1,1), lwd=c(2.5,2.5),col=c("blue","red"))
legend(2000,9.5, c("Health","Defense"), col=c("blue","red"))
legend(2000,9.5, c("training", "result")
legend(0, 0, c("training", "result")
legend(0, 0, c("training", "result"))
legend(4, 100, c("training", "result"))
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
legend(4, 100, c("training", "result"))
legend(4, 50, c("training", "result"))
legend(4, 60, c("training", "result"))
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
legend(4, 60, c("training", "result"))
legend(4, 60, c("training", "result"), lty(1, 1))
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
legend(4, 60, c("training", "result"), lty=c(1, 1))
legend(3.7, 60, c("training", "result"), lty=c(1, 1))
legend(3.5, 60, c("training", "result"), lty=c(1, 1))
legend(3.5, 60, c("training", "result"), lty=c(1))
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
legend(3.5, 60, c("training", "result"), lty=c(1))
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
legend(3.5, 60, c("training", "result"), lty1)
legend(3.5, 60, c("training", "result"), lty=1)
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
legend(c("A", "B"), col = 1:2, x = 1, y = .8, lty=1, pt.bg=1:2, pch=21:22)
legend(c("A", "B"), col = 1:2, x = 3.5, y = 60, lty=1, pt.bg=1:2, pch=21:22)
legend(c("trénovací vektory", "nalezený vztah"), col = 1:2, x = 3.5, y = 60, lty=1, pt.bg=1:2, pch=21:22)
legend(c("trénovací vektory", "nalezený vztah"), col = 1:2, x = 3, y = 60, lty=1, pt.bg=1:2, pch=21:22)
legend(c("trénovací vektory", "nalezený vztah"), col = 1:2, x = 2:5, y = 60, lty=1, pt.bg=1:2, pch=21:22)
legend(c("trénovací vektory", "nalezený vztah"), col = 1:2, x = 2.5, y = 60, lty=1, pt.bg=1:2, pch=21:22)
legend(c("trénovací vektory", "nalezený vztah"), col = 1:2, x = 2.5, y = 60, lty=1, pt.bg=2, pch=21:22)
legend(c("trénovací vektory", "nalezený vztah"), col = 1:2, x = 2.5, y = 60, lty=1, pt.bg=1:2, pch=21:22)
legend(c("trénovací vektory", "nalezený vztah"), col = 1:2, x = 2.5, y = 60, lty=1, pt.bg=1:2, pch=0)
legend(c("trénovací vektory", "nalezený vztah"), col = 1:2, x = 2.5, y = 60, lty=1, pt.bg=1:2, pch=1)
legend(c("trénovací vektory", "nalezený vztah"), col = 1:2, x = 2.5, y = 60, lty=1, pch=1)
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, lty=1, pch=1)
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, lty=1, pch=1, col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=1, col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(0, 1), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(none, 1), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(lty=1, 1), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(, 1), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(x, 1), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c("x", 1), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(, 1), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(0, 1), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(1,), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(1,0), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(1, 3), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(1, ""), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(o, ""), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c("o", ""), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(0, NA), lty=(NA, 1) col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(0, NA), lty=c(NA, 1) col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(0, NA), lty=c(NA, 1), col=c("blue", "red"))
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(1, NA), lty=c(NA, 1), col=c("blue", "red"))
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(1, NA), lty=c(NA, 1), col=c("blue", "red"))
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
par(new=TRUE)
curve(x^2*e^sin(x)+x, -5, 5, col="red")
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(1, NA), lty=c(NA, 1), col=c("blue", "red"))
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
par(new=TRUE)
curve(x^2*e^sin(x)+x, -5, 5, col="red", ylab="", xlab="")
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(1, NA), lty=c(NA, 1), col=c("blue", "red"))
pdf("porovnani.pdf")
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
par(new=TRUE)
curve(x^2*e^sin(x)+x, -5, 5, col="red", ylab="", xlab="")
legend(c("trénovací vektory", "nalezený vztah"), x = 2.5, y = 60, pch=c(1, NA), lty=c(NA, 1), col=c("blue", "red"))
dev.off()
pdf("porovnani.pdf")
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
par(new=TRUE)
curve(x^2*e^sin(x)+x, -5, 5, col="red", ylab="", xlab="")
legend(c("trénovací vektory", "nalezený vztah"), x = 2, y = 60, pch=c(1, NA), lty=c(NA, 1), col=c("blue", "red"))
dev.off()
pdf("porovnani.pdf")
plot(x, y, xlab="", ylab="", col="blue", yaxt='n')
par(new=TRUE)
curve(x^2*e^sin(x)+x, -5, 5, col="red", ylab="", xlab="")
legend(c("trénovací vektory", "nalezený vztah"), x = 1.5, y = 60, pch=c(1, NA), lty=c(NA, 1), col=c("blue", "red"))
dev.off()
